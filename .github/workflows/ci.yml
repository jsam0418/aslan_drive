name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

# Add this permissions block - CRITICAL!
permissions:
  contents: write
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  test-and-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate SQLAlchemy models
      run: |
        python -c "from models import Base, DailyOHLCV, Symbol; print('✅ SQLAlchemy models imported successfully')"

    - name: Check for schema changes without migrations
      run: |
        # Set up temporary in-memory database to check for schema differences
        export DATABASE_URL="sqlite:///temp_schema_check.db"
        
        # Create current schema from models
        python -c "
        import os
        from sqlalchemy import create_engine
        from models.base import Base
        
        engine = create_engine(os.getenv('DATABASE_URL'))
        Base.metadata.create_all(engine)
        print('✅ Temporary database created with current schema')
        "
        
        # Check if alembic thinks there are differences
        if alembic check > /dev/null 2>&1; then
          echo "✅ No pending migrations detected"
        else
          echo "❌ Schema changes detected without corresponding Alembic migration!"
          echo "Please run 'alembic revision --autogenerate -m \"Description of changes\"'"
          echo "Then commit both the model changes AND the new migration file."
          
          echo ""
          echo "Current Alembic status:"
          alembic current || echo "No current revision"
          
          echo ""
          echo "Checking for differences:"
          alembic check 2>&1 || true
          
          exit 1
        fi
        
        # Clean up
        rm -f temp_schema_check.db

    - name: Run code formatting check
      run: |
        python -m black --check --diff services/ models/ tests/

    - name: Run import sorting check
      run: |
        python -m isort --check-only --diff services/ models/ tests/

    - name: Run type checking
      run: |
        python -m mypy services/ models/ --ignore-missing-imports

    - name: Run basic functionality tests
      run: |
        python test_basic.py

    - name: Run unit tests with pytest
      run: |
        python -m pytest tests/ -v --tb=short --cov=services --cov=tools --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: false

  # Build and Push Individual Service Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: test-and-quality
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    strategy:
      matrix:
        service: 
          - name: data-ingestion
            dockerfile: services/data_ingestion/Dockerfile
            context: .
          - name: health-check
            dockerfile: services/health_check/Dockerfile
            context: .
          - name: md-provider
            dockerfile: services/md_provider/Dockerfile
            context: .
          - name: db-migration
            dockerfile: services/db_migration/Dockerfile
            context: .
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Validate SQLAlchemy models for build
      run: |
        python -c "from models import Base, DailyOHLCV, Symbol; print('✅ Models validated for Docker build')"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # FIXED: Use forward slash instead of hyphen for proper GHCR naming
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.context }}
        file: ${{ matrix.service.dockerfile }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.service.name }}
        cache-to: type=gha,mode=max,scope=${{ matrix.service.name }}

  # Integration Tests
  integration-test:
    runs-on: ubuntu-latest
    needs: test-and-quality
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test123
          POSTGRES_USER: trader
          POSTGRES_DB: aslan_drive
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Alembic migrations for integration tests
      env:
        DATABASE_URL: postgresql://trader:test123@localhost:5432/aslan_drive
      run: |
        # Run Alembic migrations to set up test database
        alembic upgrade head

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://trader:test123@localhost:5432/aslan_drive
      run: |
        python -m pytest tests/test_integration.py -v --tb=short

    - name: Test data ingestion flow
      env:
        DATABASE_URL: postgresql://trader:test123@localhost:5432/aslan_drive
      run: |
        # Test that data ingestion can run without errors
        cd services/data_ingestion && python main.py || echo "Expected to fail without proper setup"

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: test-and-quality
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit[toml]
        bandit -r services/ tools/ -f json -o bandit-report.json || true

    - name: Run Safety dependency scan
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Generate Kubernetes Deployment Manifests
  generate-k8s-manifests:
    runs-on: ubuntu-latest
    needs: test-and-quality
    # ✅ allow both push and PR events
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Verify Kustomize installation
        run: kustomize version

      - name: Generate compiled Kubernetes manifests
        run: |
          cd k8s
          echo "🏗️ Building Kubernetes manifests with Kustomize..."
          kustomize build . > compiled.yaml

      - name: Validate generated manifests
        run: |
          cd k8s
          python3 -c "
          import yaml
          import sys
          with open('compiled.yaml', 'r') as f:
              docs = list(yaml.safe_load_all(f))
          print(f'✅ Valid YAML with {len([d for d in docs if d])} resources')
          "

      - name: Upload compiled manifests as artifact
        uses: actions/upload-artifact@v4
        with:
          name: kubernetes-manifests
          path: k8s/compiled.yaml
          retention-days: 30

      # ✅ only commit back on push (not on PR)
      - name: Commit compiled manifests back to repo
        if: github.event_name == 'push'
        run: |
          cd k8s
          if git diff --quiet compiled.yaml 2>/dev/null; then
            echo "📝 No changes to compiled.yaml"
          else
            echo "📝 Committing updated compiled.yaml"
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add compiled.yaml
            git commit -m "🤖 Update compiled Kubernetes manifests

            Generated from:
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            - Workflow: ${{ github.workflow }}
            
            🚀 Ready for deployment with: kubectl apply -f k8s/compiled.yaml" || true
            git push || echo "Nothing to push"
          fi 

  # Build Status Summary
  build-summary:
    runs-on: ubuntu-latest
    needs: [test-and-quality, build-and-push, security-scan, integration-test, generate-k8s-manifests]
    if: always()
    steps:
    - name: Build Summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality: ${{ needs.test-and-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Build & Push: ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- K8s Manifests: ${{ needs.generate-k8s-manifests.result }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test-and-quality.result }}" == "success" && "${{ needs.build-and-push.result }}" == "success" ]]; then
          echo "✅ **Build Status: PASSED**" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Docker images pushed to GHCR**" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.generate-k8s-manifests.result }}" == "success" ]]; then
            echo "📋 **Compiled K8s manifests ready for deployment**" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ **Build Status: FAILED**" >> $GITHUB_STEP_SUMMARY
        fi
