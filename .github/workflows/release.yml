name: Release and Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.1.0'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and publish Docker images
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [base, data_ingestion, md_provider, health_check]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}_${{ matrix.service }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Validate SQLAlchemy models
      run: |
        python -c "from models import Base, DailyOHLCV, Symbol; print('âœ… SQLAlchemy models validated for release')"

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Create GitHub Release
  create-release:
    runs-on: ubuntu-latest
    needs: build-and-publish
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Get the tag name
        TAG_NAME=${GITHUB_REF#refs/tags/}
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG_NAME=${{ github.event.inputs.tag }}
        fi
        
        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        # Generate changelog
        if [ -n "$PREV_TAG" ]; then
          echo "## Changes since $PREV_TAG" > CHANGELOG.md
          git log --oneline --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          echo "- First release of Aslan Drive trading infrastructure" >> CHANGELOG.md
        fi
        
        echo "## Docker Images" >> CHANGELOG.md
        echo "- \`ghcr.io/${{ github.repository }}_base:$TAG_NAME\`" >> CHANGELOG.md
        echo "- \`ghcr.io/${{ github.repository }}_data_ingestion:$TAG_NAME\`" >> CHANGELOG.md
        echo "- \`ghcr.io/${{ github.repository }}_md_provider:$TAG_NAME\`" >> CHANGELOG.md
        echo "- \`ghcr.io/${{ github.repository }}_health_check:$TAG_NAME\`" >> CHANGELOG.md
        
        echo "## Deployment Files" >> CHANGELOG.md
        echo "- Infrastructure: \`docker-compose.infrastructure.yml\`" >> CHANGELOG.md
        echo "- Portainer: \`portainer/infrastructure-stack.yml\`" >> CHANGELOG.md
        echo "- Systemd: \`systemd/*.service\` and \`systemd/*.timer\`" >> CHANGELOG.md
        echo "- N8n: \`n8n/aslan-drive-workflow.json\`" >> CHANGELOG.md
        
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.changelog.outputs.tag_name }}
        release_name: Aslan Drive ${{ steps.changelog.outputs.tag_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(steps.changelog.outputs.tag_name, '-') }}

    - name: Upload deployment files
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: docker-compose.infrastructure.yml
        asset_name: docker-compose.infrastructure.yml
        asset_content_type: application/x-yaml

  # Update container registry packages
  update-packages:
    runs-on: ubuntu-latest
    needs: build-and-publish
    permissions:
      packages: write
    steps:
    - name: Update package descriptions
      run: |
        # This would update the package descriptions in GitHub Container Registry
        # Currently GitHub Actions doesn't provide direct API for this
        echo "Packages published successfully to ghcr.io/${{ github.repository }}"
        echo "Images available:"
        echo "- ghcr.io/${{ github.repository }}_base"
        echo "- ghcr.io/${{ github.repository }}_data_ingestion"
        echo "- ghcr.io/${{ github.repository }}_md_provider" 
        echo "- ghcr.io/${{ github.repository }}_health_check"

  # Notify deployment channels
  notify-release:
    runs-on: ubuntu-latest
    needs: [build-and-publish, create-release]
    if: always() && (needs.build-and-publish.result == 'success')
    steps:
    - name: Notify Slack
      if: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG_NAME=${{ github.event.inputs.tag }}
        fi
        
        curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          -H 'Content-type: application/json' \
          --data "{
            \"text\": \"ðŸš€ Aslan Drive $TAG_NAME Released!\",
            \"attachments\": [{
              \"color\": \"good\",
              \"fields\": [{
                \"title\": \"Version\",
                \"value\": \"$TAG_NAME\",
                \"short\": true
              }, {
                \"title\": \"Docker Images\",
                \"value\": \"Available at ghcr.io/${{ github.repository }}\",
                \"short\": true
              }, {
                \"title\": \"Release Notes\",
                \"value\": \"https://github.com/${{ github.repository }}/releases/tag/$TAG_NAME\",
                \"short\": false
              }]
            }]
          }"

    - name: Create deployment issue
      if: github.repository_owner == github.actor
      uses: actions/github-script@v7
      with:
        script: |
          const tag = context.payload.ref?.replace('refs/tags/', '') || '${{ github.event.inputs.tag }}';
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Deploy ${tag} to production`,
            body: `## Deployment Checklist for ${tag}
          
          ### Pre-deployment
          - [ ] Review release notes
          - [ ] Backup production database
          - [ ] Verify staging deployment
          
          ### Infrastructure Deployment
          - [ ] Update infrastructure stack in Portainer
          - [ ] Update image tags in deployment files
          - [ ] Deploy PostgreSQL changes (if any)
          - [ ] Deploy MD Provider API
          
          ### Scheduled Services
          - [ ] Update systemd service files (if using systemd)
          - [ ] Update N8n workflow (if using N8n)
          - [ ] Test scheduled job execution
          
          ### Post-deployment
          - [ ] Verify all services are healthy
          - [ ] Run manual health check
          - [ ] Monitor logs for errors
          - [ ] Update monitoring dashboards
          
          ### Rollback Plan
          - [ ] Previous images tagged and available
          - [ ] Database rollback scripts ready
          - [ ] Monitoring alerts configured
          
          **Docker Images:**
          - \`ghcr.io/${{ github.repository }}_base:${tag}\`
          - \`ghcr.io/${{ github.repository }}_data_ingestion:${tag}\`
          - \`ghcr.io/${{ github.repository }}_md_provider:${tag}\`
          - \`ghcr.io/${{ github.repository }}_health_check:${tag}\`
          `,
            labels: ['deployment', 'release']
          });