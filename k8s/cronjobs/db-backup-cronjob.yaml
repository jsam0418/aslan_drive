---
# Database Backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: aslan-db-backup
  namespace: aslan-drive
  labels:
    app: aslan-drive
    component: db-backup
spec:
  schedule: "0 4 * * 6"  # Saturdays at midnight ET (4:00 AM UTC)
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 4  # Keep 4 weeks of successful backups
  failedJobsHistoryLimit: 2
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: aslan-drive
            component: db-backup
        spec:
          restartPolicy: OnFailure
          initContainers:
          # Run pre-backup
          - name: pre-backup
            image: ghcr.io/jsam0418/aslan_drive/db-migration:latest
            imagePullPolicy: Always
            command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "Starting pre-backup database migration..."
              python3 -m services.db_migration.main
              echo "Pre-backup migration completed"
            env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: aslan-drive-secrets
                  key: database-url
            - name: MIGRATION_COMMAND
              value: "upgrade"
            - name: LOG_LEVEL
              value: "info"
          containers:
          - name: db-backup
            image: postgres:15
            command:
            - /bin/bash
            - -c
            - |
              set -e
              export PGPASSWORD="$POSTGRES_PASSWORD"
              BACKUP_DATE=$(date +%Y%m%d_%H%M%S)
              BACKUP_FILE="/backup/aslan_drive_backup_${BACKUP_DATE}.sql"
              
              echo "Starting database backup to $BACKUP_FILE"
              
              # Create backup with pg_dump
              pg_dump \
                --host=$POSTGRES_HOST \
                --port=5432 \
                --username=$POSTGRES_USER \
                --dbname=$POSTGRES_DB \
                --verbose \
                --clean \
                --create \
                --if-exists \
                --format=custom \
                --file="${BACKUP_FILE}.custom"
              
              # Also create a plain SQL backup for easy restoration
              pg_dump \
                --host=$POSTGRES_HOST \
                --port=5432 \
                --username=$POSTGRES_USER \
                --dbname=$POSTGRES_DB \
                --verbose \
                --clean \
                --create \
                --if-exists \
                --file="${BACKUP_FILE}"
              
              # Compress the plain SQL backup
              gzip "${BACKUP_FILE}"
              
              echo "Backup completed successfully"
              
              # Clean up old backups (keep last 8 weeks)
              find /backup -name "aslan_drive_backup_*.sql.gz" -mtime +56 -delete || true
              find /backup -name "aslan_drive_backup_*.custom" -mtime +56 -delete || true
              
              echo "Old backups cleaned up"
              ls -la /backup/
              
              # Signal completion for post-backup step
              touch /shared/backup-completed
            env:
            - name: POSTGRES_HOST
              value: "postgres"
            - name: POSTGRES_DB
              value: "aslan_drive"
            - name: POSTGRES_USER
              value: "trader"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aslan-drive-secrets
                  key: postgres-password
            - name: TZ
              value: "America/New_York"
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
            - name: shared-data
              mountPath: /shared
          # Post-backup verification and final backup
          - name: post-backup
            image: ghcr.io/jsam0418/aslan_drive/db-migration:latest
            imagePullPolicy: Always
            command:
            - /bin/bash
            - -c
            - |
              set -e
              # Wait for backup to complete
              while [ ! -f /shared/backup-completed ]; do
                echo "Waiting for backup to complete..."
                sleep 5
              done
              
              echo "Backup completed, running post-backup migration verification..."
              python3 -m services.db_migration.main
              
              echo "Creating final post-migration backup..."
              export PGPASSWORD="$POSTGRES_PASSWORD"
              BACKUP_DATE=$(date +%Y%m%d_%H%M%S)
              FINAL_BACKUP="/backup/aslan_drive_post_migration_${BACKUP_DATE}.sql"
              
              # Create post-migration backup
              pg_dump \
                --host=$POSTGRES_HOST \
                --port=5432 \
                --username=$POSTGRES_USER \
                --dbname=$POSTGRES_DB \
                --verbose \
                --clean \
                --create \
                --if-exists \
                --file="${FINAL_BACKUP}"
              
              # Compress the final backup
              gzip "${FINAL_BACKUP}"
              
              echo "Post-migration backup completed successfully"
            env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: aslan-drive-secrets
                  key: database-url
            - name: MIGRATION_COMMAND
              value: "check"
            - name: POSTGRES_HOST
              value: "postgres"
            - name: POSTGRES_DB
              value: "aslan_drive"
            - name: POSTGRES_USER
              value: "trader"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aslan-drive-secrets
                  key: postgres-password
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
            - name: shared-data
              mountPath: /shared
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "200m"
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: db-backup-pvc
          - name: shared-data
            emptyDir: {}

---
# Persistent Volume Claim for DB Backups
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-backup-pvc
  namespace: aslan-drive
  labels:
    app: aslan-drive
    component: db-backup
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: backup-storage
  resources:
    requests:
      storage: 20Gi