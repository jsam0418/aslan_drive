version: '3.8'

# Standalone services for independent deployment
# Each service can be deployed separately via Portainer

services:
  # PostgreSQL - Always running database
  postgres:
    image: postgres:15
    container_name: aslan_postgres
    environment:
      POSTGRES_DB: aslan_drive
      POSTGRES_USER: trader
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-trading123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./generated/migration.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trader -d aslan_drive"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - aslan_network
    restart: unless-stopped
    labels:
      - "traefik.enable=false"
      - "aslan.service=database"
      - "aslan.tier=infrastructure"

  # Base image builder (run once)
  base_build:
    build:
      context: .
      dockerfile: docker/Dockerfile.base
    image: aslan_drive_base:latest
    container_name: aslan_base_build
    volumes:
      - .:/app
    networks:
      - aslan_network
    profiles:
      - build
    labels:
      - "aslan.service=base-image"
      - "aslan.tier=build"

  # Data Ingestion - Scheduled job
  data_ingestion:
    build:
      context: .
      dockerfile: docker/Dockerfile.data_ingestion
    image: aslan_drive_data_ingestion:latest
    container_name: aslan_data_ingestion
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://trader:${POSTGRES_PASSWORD:-trading123}@postgres:5432/aslan_drive
      CONTINUOUS_MODE: ${DATA_INGESTION_CONTINUOUS:-false}
      INGESTION_INTERVAL_SECONDS: ${DATA_INGESTION_INTERVAL:-3600}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - .:/app
    networks:
      - aslan_network
    restart: "no"  # For scheduled execution
    profiles:
      - ingestion
    labels:
      - "traefik.enable=false"
      - "aslan.service=data-ingestion"
      - "aslan.tier=processing"
      - "aslan.schedule=daily"

  # MD Provider API - Always running service
  md_provider:
    build:
      context: .
      dockerfile: docker/Dockerfile.md_provider
    image: aslan_drive_md_provider:latest
    container_name: aslan_md_provider
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://trader:${POSTGRES_PASSWORD:-trading123}@postgres:5432/aslan_drive
      MD_PROVIDER_HOST: 0.0.0.0
      MD_PROVIDER_PORT: 8000
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${MD_PROVIDER_PORT:-8000}:8000"
    volumes:
      - .:/app
    networks:
      - aslan_network
    restart: unless-stopped
    profiles:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.md-provider.rule=Host(`api.aslan-drive.local`)"
      - "traefik.http.services.md-provider.loadbalancer.server.port=8000"
      - "aslan.service=md-provider"
      - "aslan.tier=api"

  # Health Check - Scheduled job
  health_check:
    build:
      context: .
      dockerfile: docker/Dockerfile.health_check
    image: aslan_drive_health_check:latest
    container_name: aslan_health_check
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://trader:${POSTGRES_PASSWORD:-trading123}@postgres:5432/aslan_drive
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL:-}
      CONTINUOUS_MODE: ${HEALTH_CHECK_CONTINUOUS:-false}
      HEALTH_CHECK_INTERVAL_SECONDS: ${HEALTH_CHECK_INTERVAL:-3600}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - .:/app
    networks:
      - aslan_network
    restart: "no"  # For scheduled execution
    profiles:
      - health-check
    labels:
      - "traefik.enable=false"
      - "aslan.service=health-check"
      - "aslan.tier=monitoring"
      - "aslan.schedule=daily"

volumes:
  postgres_data:
    name: aslan_postgres_data
    labels:
      - "aslan.data=postgres"

networks:
  aslan_network:
    name: aslan_network
    driver: bridge
    labels:
      - "aslan.network=main"